pipeline {
 agent any
	 tools {
			maven 'M3' 
		}
  environment {

		// Mirror warehouse address
		def registry = "172.16.17.166"
// 		def registry = "192.168.25.80:8080"
		// Mirror warehouse project
		def project = "hms"
		// Image name
		def app_name = "day-registry-service610"
		// Mirror full name
		def image_name = "${registry}/${project}/${app_name}:${BUILD_NUMBER}"
		// git address
// 		def git_address = "http://git.istd.com/ma.mardani/job.git"
        def git_address = "https://gitlab.demisco.com/hms/ehr.git"
		// Certification
		def harbor_auth = "810c6d50-75cd-4e6c-ae21-c82516ae79d6"
		def gitlab_auth = "77ea42b4-8d48-4c48-941e-82d80dc154b6"

		// K8s Certification
// 		def k8s_auth = "e5a0ecf9-69e4-40f0-ba20-ec4cd3cd4356"
		
		// K8s Certification prod
		def k8s_auth = "4e1ef5b9-7af5-4b7a-a500-7d821478f464"

		// harbor secret_name
		def harbor_registry_secret = "harbor-pull-secret"
		// k8s nodePort
		def nodePort = "30610"
		def clusterPort = "8080"
		def containerPort = "8080"
		def name_space = "default"
		def replica = "1"
		def replica_history = "2"
		}

  stages{
        stage('Pull code') { 
         steps {
             sh "git config --global http.sslVerify false"
            checkout([$class: 'GitSCM', branches: [[name: "*/rel"]], userRemoteConfigs: [[credentialsId: "${gitlab_auth}", url: "${git_address}"]]])
            sh "ls"
			echo "Pull code"
         }
        }
        stage('Code compilation') {
             steps {
            sh "mvn clean package --settings /var/jenkins_home/setting.xml -Dmaven.test.skip=true"
            sh "ls"
			echo "Code compilation"
             }
        }
        stage('Build mirror') {
             steps {
            withCredentials([usernamePassword(credentialsId: "${harbor_auth}", passwordVariable: 'password', usernameVariable: 'username')]) {
                sh """
                    echo '
                        
                        FROM 192.168.25.203:8080/library/serverjre:8
                        ENV dms.configserver.uri='http://172.16.17.162:30666'
                        ENV dms.configserver.profile='prod'
                        COPY /registry-app/target/registry-app-1.0.0.jar /usr/local/lib/ehr-0.0.1.jar
                        #RUN sudo echo "172.16.1.21 rasatpa.ir" >> /etc/hosts
                        ENTRYPOINT ["bin/sh","-c","java -Xmx256m -Duser.timezone=Asia/Tehran -Djava.security.egd=file:/dev/./urandom -jar /usr/local/lib/ehr-0.0.1.jar"]
                        
                    ' > Dockerfile

                    docker build -t ${image_name} --add-host=rasatpa.ir:172.16.1.21 .
                    docker login -u ${username} -p '${password}' ${registry}
                    docker push ${image_name}
                """
            echo "Code compilation"
            }
            }
        }
            stage('create deployment') {
             steps {
            sh """
                    echo 'apiVersion: apps/v1
kind: Deployment
metadata:
  name: $app_name
  namespace: $name_space
spec:
  replicas: $replica
  revisionHistoryLimit: $replica_history
  selector:
    matchLabels:
      app: $app_name
  template:
    metadata:
      labels:
        app: $app_name
        logging: "true"
    spec:
      imagePullSecrets:
      - name: $harbor_registry_secret
      containers:
      - name: $app_name
        image: $image_name
        resources:
          requests:
            memory: "256Mi"
            cpu: "500m"
          limits:
            memory: "1024Mi"
            cpu: "2000m"
        ports:
        - containerPort: $containerPort
---                                
kind: Service
apiVersion: v1
metadata:     
  name: $app_name
  namespace: $name_space
spec:                       
  type: NodePort            
  selector:                 
    app: $app_name
  ports:                         
    - protocol: TCP              
      port: $clusterPort                   
      targetPort: $containerPort
      nodePort: $nodePort' > deploy.yml
                """
			echo "create deployment compilation"
             }
        }
        stage('Deploy to K8s'){
             steps {
            kubernetesDeploy configs: 'deploy.yml', kubeconfigId: "${k8s_auth}"
             
                 echo "Code compilation"
             }
        }
    }
    }
